# Midnight Spa Website Deployment Guide
# Hetzner Cloud + GitHub Deployment Process

## 1. Prerequisites
- GitHub account
- Hetzner Cloud account
- Domain name (optional but recommended)
- Node.js 18+ installed locally
- PostgreSQL database

## 2. GitHub Repository Setup
1. Create a new GitHub repository
2. Initialize Git in your local project:
   ```bash
   git init
   git add .
   git commit -m "Initial commit"
   git branch -M main
   git remote add origin YOUR_GITHUB_REPO_URL
   git push -u origin main
   ```

## 3. Cloudflare Setup
1. Add your domain to Cloudflare:
   - Log in to Cloudflare
   - Click "Add a Site"
   - Enter your domain name
   - Select the Free plan
   - Follow the instructions to update your domain nameservers

2. Configure Cloudflare settings:
   - SSL/TLS: Set to "Full"
   - Enable "Always Use HTTPS"
   - Edge Certificates:
     - Enable "Always Use HTTPS"
     - Set Minimum TLS Version to 1.2
     - Enable "Opportunistic Encryption"
     - Enable "TLS 1.3"
   - Configure Page Rules (optional):
     - Add a page rule for www to non-www redirect
     - Add caching rules for static assets

3. Add DNS Records:
   - Type: A
   - Name: @ (or your domain)
   - Content: Your Hetzner server IP
   - Proxy status: Proxied
   - Add another record for www subdomain if needed

## 4. Hetzner Cloud Server Setup
1. Create a new project in Hetzner Cloud Console
2. Create a new server:
   - Choose Ubuntu 24.04
   - Select CPX21 (4 vCPU, 8 GB RAM) or higher
   - Choose a datacenter location
   - Add your SSH key
   - Enable IPv6
   - Add cloud-init script:
     ```yaml
     #cloud-config
     package_update: true
     package_upgrade: true
     packages:
       - fail2ban
       - ufw
     ```
   - Create server

3. Configure Hetzner Firewall:
   - Create a new firewall
   - Add the following rules:
     - Allow incoming TCP 80 (HTTP)
     - Allow incoming TCP 443 (HTTPS)
     - Allow incoming TCP 22 (SSH)
     - Allow incoming ICMP
   - Apply the firewall to your server

## 5. Server Initial Configuration
1. SSH into your server:
   ```bash
   ssh root@YOUR_SERVER_IP
   ```

2. Update system and install dependencies:
   ```bash
   apt update && apt upgrade -y
   apt install -y nodejs npm postgresql nginx certbot python3-certbot-nginx
   ```

3. Install Node.js 18:
   ```bash
   curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
   apt-get install -y nodejs
   ```

## 6. PostgreSQL Database Setup
1. Access PostgreSQL:
   ```bash
   sudo -u postgres psql
   ```

2. Create database and user:
   ```sql
   CREATE DATABASE midnightspa;
   CREATE USER midnightadmin WITH ENCRYPTED PASSWORD 'your_strong_password';
   GRANT ALL PRIVILEGES ON DATABASE midnightspa TO midnightadmin;
   ```

## 7. Application Deployment
1. Clone repository:
   ```bash
   cd /var/www
   git clone YOUR_GITHUB_REPO_URL midnightspa
   cd midnightspa
   ```

2. Install dependencies:
   ```bash
   npm install
   ```

3. Create .env file:
   ```bash
   nano .env
   ```
   Add:
   ```
   DATABASE_URL="postgresql://midnightadmin:your_strong_password@localhost:5432/midnightspa"
   NEXTAUTH_SECRET="your_nextauth_secret"
   NEXTAUTH_URL="https://your-domain.com"
   ```

4. Run database migrations:
   ```bash
   npx prisma migrate deploy
   ```

5. Build the application:
   ```bash
   npm run build
   ```

## 8. PM2 Process Manager Setup
1. Install PM2:
   ```bash
   npm install -g pm2
   ```

2. Start application:
   ```bash
   pm2 start npm --name "midnightspa" -- start
   pm2 startup
   pm2 save
   ```

## 9. Nginx Configuration
1. Create Nginx config:
   ```bash
   nano /etc/nginx/sites-available/midnightspa
   ```

2. Update the Nginx configuration to work with Cloudflare:
   ```nginx
   server {
       listen 80;
       listen [::]:80;
       server_name your-domain.com www.your-domain.com;

       # Redirect HTTP to HTTPS
       return 301 https://$server_name$request_uri;
   }

   server {
       listen 443 ssl http2;
       listen [::]:443 ssl http2;
       server_name your-domain.com www.your-domain.com;

       # SSL configuration
       ssl_certificate /etc/letsencrypt/live/your-domain.com/fullchain.pem;
       ssl_certificate_key /etc/letsencrypt/live/your-domain.com/privkey.pem;
       ssl_session_timeout 1d;
       ssl_session_cache shared:SSL:50m;
       ssl_session_tickets off;

       # Modern configuration
       ssl_protocols TLSv1.2 TLSv1.3;
       ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
       ssl_prefer_server_ciphers off;

       # HSTS (uncomment if you're sure)
       # add_header Strict-Transport-Security "max-age=63072000" always;

       # Cloudflare real IP restoration
       set_real_ip_from 103.21.244.0/22;
       set_real_ip_from 103.22.200.0/22;
       set_real_ip_from 103.31.4.0/22;
       set_real_ip_from 104.16.0.0/13;
       set_real_ip_from 104.24.0.0/14;
       set_real_ip_from 108.162.192.0/18;
       set_real_ip_from 131.0.72.0/22;
       set_real_ip_from 141.101.64.0/18;
       set_real_ip_from 162.158.0.0/15;
       set_real_ip_from 172.64.0.0/13;
       set_real_ip_from 173.245.48.0/20;
       set_real_ip_from 188.114.96.0/20;
       set_real_ip_from 190.93.240.0/20;
       set_real_ip_from 197.234.240.0/22;
       set_real_ip_from 198.41.128.0/17;
       set_real_ip_from 2400:cb00::/32;
       set_real_ip_from 2606:4700::/32;
       set_real_ip_from 2803:f800::/32;
       set_real_ip_from 2405:b500::/32;
       set_real_ip_from 2405:8100::/32;
       set_real_ip_from 2c0f:f248::/32;
       set_real_ip_from 2a06:98c0::/29;
       real_ip_header CF-Connecting-IP;

       location / {
           proxy_pass http://localhost:3000;
           proxy_http_version 1.1;
           proxy_set_header Upgrade $http_upgrade;
           proxy_set_header Connection 'upgrade';
           proxy_set_header Host $host;
           proxy_set_header X-Real-IP $remote_addr;
           proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
           proxy_set_header X-Forwarded-Proto $scheme;
           proxy_cache_bypass $http_upgrade;
       }
   }
   ```

3. Enable site:
   ```bash
   ln -s /etc/nginx/sites-available/midnightspa /etc/nginx/sites-enabled/
   nginx -t
   systemctl restart nginx
   ```

## 10. SSL Certificate Setup
1. Install SSL certificate:
   ```bash
   certbot --nginx -d your-domain.com -d www.your-domain.com
   ```

## 11. GitHub Actions Setup (Automated Deployment)
1. Create `.github/workflows/deploy.yml` in your repository:
   ```yaml
   name: Deploy to Production
   
   on:
     push:
       branches: [ main ]
   
   jobs:
     deploy:
       runs-on: ubuntu-latest
       steps:
         - uses: actions/checkout@v2
         
         - name: Deploy to Server
           uses: appleboy/ssh-action@master
           with:
             host: ${{ secrets.SERVER_IP }}
             username: ${{ secrets.SERVER_USER }}
             key: ${{ secrets.SSH_PRIVATE_KEY }}
             script: |
               cd /var/www/midnightspa
               git pull origin main
               npm install
               npm run build
               pm2 restart midnightspa
   ```

2. Add GitHub Secrets:
   - SERVER_IP: Your Hetzner server IP
   - SERVER_USER: root (or your deployment user)
   - SSH_PRIVATE_KEY: Your SSH private key

## 12. Maintenance and Monitoring
1. Setup basic monitoring:
   ```bash
   pm2 install pm2-logrotate
   pm2 monit
   ```

2. Setup regular backups:
   ```bash
   pg_dump -U midnightadmin midnightspa > /backup/midnightspa_$(date +%Y%m%d).sql
   ```

## 13. Security Considerations
1. Setup UFW firewall:
   ```bash
   ufw allow OpenSSH
   ufw allow 'Nginx Full'
   ufw enable
   ```

2. Create deployment user (optional but recommended):
   ```bash
   adduser deployer
   usermod -aG sudo deployer
   ```

## 14. Post-Deployment Checks
1. Verify application is running:
   ```bash
   pm2 status
   curl http://localhost:3000
   ```

2. Check logs:
   ```bash
   pm2 logs midnightspa
   ```

3. Monitor system resources:
   ```bash
   htop
   ```

## Troubleshooting
- Check Nginx logs: `/var/log/nginx/error.log`
- Check PM2 logs: `pm2 logs`
- Check application logs: `pm2 logs midnightspa`
- Database connection: `psql -U midnightadmin -d midnightspa`

## Regular Maintenance Tasks
1. System updates:
   ```bash
   apt update && apt upgrade -y
   ```

2. SSL certificate renewal (automatic with certbot):
   ```bash
   certbot renew --dry-run
   ```

3. Database backups:
   ```bash
   pg_dump -U midnightadmin midnightspa > /backup/midnightspa_$(date +%Y%m%d).sql
   ```

4. Log rotation (automatic with PM2 logrotate)

## Rollback Procedure
1. Using Git:
   ```bash
   cd /var/www/midnightspa
   git reset --hard HEAD^
   npm install
   npm run build
   pm2 restart midnightspa
   ```

2. Database rollback:
   ```bash
   psql -U midnightadmin midnightspa < /backup/midnightspa_YYYYMMDD.sql
   ``` 